{
  "categories": [
    {
      "id": 1,
      "name": "Programación",
      "description": "Preguntas de programación y algoritmos",
      "color": "#005AEE",
      "created_at": "2025-08-16T17:46:34.096Z"
    },
    {
      "id": 2,
      "name": "SQL",
      "description": "Consultas y bases de datos",
      "color": "#2CD5C4",
      "created_at": "2025-08-16T17:46:34.103Z"
    },
    {
      "id": 3,
      "name": "Lógica",
      "description": "Razonamiento lógico y matemático",
      "color": "#000026",
      "created_at": "2025-08-16T17:46:34.103Z"
    }
  ],
  "question_families": [
    {
      "id": 1,
      "category_id": 1,
      "name": "Programación",
      "subfamily": "Programación General",
      "created_at": "2025-08-16T17:46:34.103Z"
    },
    {
      "id": 2,
      "category_id": 1,
      "name": "Programación",
      "subfamily": "Algoritmos",
      "created_at": "2025-08-16T17:46:34.103Z"
    },
    {
      "id": 3,
      "category_id": 1,
      "name": "Programación",
      "subfamily": "Estructuras de Datos",
      "created_at": "2025-08-16T17:46:34.103Z"
    },
    {
      "id": 4,
      "category_id": 2,
      "name": "Programación",
      "subfamily": "SQL y Bases de Datos",
      "created_at": "2025-08-16T17:46:34.103Z"
    }
  ],
  "tests": [
    {
      "id": 1,
      "name": "Team Eureka 3it",
      "description": " Prueba técnica diseñada para los postulantes al Team Eureka.",
      "time_limit": 120,
      "max_attempts": 1,
      "passing_score": 60,
      "is_active": true,
      "created_by": "admin",
      "created_at": "2025-08-19T16:00:29.876Z",
      "updated_at": "2025-08-19T16:00:29.876Z"
    },
    {
      "id": 2,
      "name": "SEFDSF",
      "description": "DFDG",
      "time_limit": 60,
      "max_attempts": 1,
      "passing_score": 60,
      "is_active": true,
      "created_by": "admin",
      "created_at": "2025-08-19T16:13:35.276Z",
      "updated_at": "2025-08-19T16:13:35.276Z"
    }
  ],
  "questions": [
    {
      "id": 1,
      "test_id": 1,
      "category_id": 1,
      "family_id": 1,
      "type": "programming",
      "title": "Encuentra el mayor número en un arreglo",
      "description": "Tienes un arreglo (llamado myArray) con 5 elementos (enteros en el rango de 1 a 100). Escribe un programa utilizando TLang que imprima el número más alto del arreglo (Si se repite, solo imprimir una vez).\n\nEl código que llena el arreglo ya está escrito, pero puedes editarlo para probar con otros valores. Con el botón de refrescar puedes recuperar el valor original que será utilizado para evaluar la pregunta como correcta o incorrecta durante la ejecución.\n\nIMPORTANTE: Asegúrate de solo imprimir el número y ningún otro texto, ya que esto marcaría la pregunta como inválida.\n\nPor ejemplo, para el arreglo indicado, el output del programa debe ser: 35",
      "difficulty": "Fácil",
      "max_score": 10,
      "order_index": 1,
      "initial_code": "// Arreglo predefinido para la prueba\nmyArray = [12, 35, 1, 10, 34]\n\n// Escribe tu código aquí para encontrar el mayor número\n// IMPORTANTE: Solo imprime el número, sin texto adicional",
      "language": "tlang",
      "database_schema": "",
      "options": [],
      "correct_answer": "",
      "execution_timeout": 5000,
      "allow_partial_credit": true,
      "show_expected_output": false,
      "created_at": "2025-08-19T16:00:29.905Z"
    },
    {
      "id": 2,
      "test_id": 1,
      "category_id": 1,
      "family_id": 1,
      "type": "programming",
      "title": " Encuentra el número que más se repite en un arreglo",
      "description": "Tienes un arreglo (llamado myArray) con 10 elementos (enteros en el rango de 1 a 5). Escribe un programa utilizando TLang que imprima el número que más se repite del arreglo y también imprimir la cantidad de veces que aparece.\n\nEl código que llena el arreglo ya está escrito, pero puedes editarlo para probar con otros valores. Con el botón de refrescar puedes recuperar el valor original que será utilizado para evaluar la pregunta como correcta o incorrecta durante la ejecución.\n\nSu programa debe analizar el arreglo de izquierda a derecha para que en caso de que dos números tengan el mismo número de ocurrencias, el que aparece por primera vez de izquierda a derecha será el que se imprima.\n\nLa salida de los datos para el ejemplo sería la siguiente:\nRep: 3\nVal: 5\n\nEn el ejemplo, hay 3 ocurrencias del número 5 en el arreglo.\n\nIMPORTANTE: Asegúrate de que el output del programa sea exactamente como se muestra en el ejemplo, ya que cualquier diferencia hará que la respuesta se marque como incorrecta.",
      "difficulty": "Medio",
      "max_score": 20,
      "order_index": 1,
      "initial_code": "// Arreglo predefinido para la prueba (10 elementos, rango 1-5)\nmyArray = [1, 5, 3, 5, 2, 5, 4, 1, 3, 2]\n\n// Escribe tu código aquí\n// Debe imprimir exactamente:\n// Rep: [cantidad]\n// Val: [número]",
      "language": "tlang",
      "database_schema": "",
      "options": [],
      "correct_answer": "",
      "execution_timeout": 5000,
      "allow_partial_credit": true,
      "show_expected_output": false,
      "created_at": "2025-08-19T16:00:30.046Z"
    },
    {
      "id": 3,
      "test_id": 1,
      "category_id": 1,
      "family_id": 1,
      "type": "programming",
      "title": "Ordenar bloques de números",
      "description": "Tienes un arreglo de números enteros desordenados. Escribe un programa utilizando TLang que ordene el arreglo de menor a mayor e imprima el resultado.\n\nEl código que llena el arreglo ya está escrito, pero puedes editarlo para probar con otros valores. Con el botón de refrescar puedes recuperar el valor original que será utilizado para evaluar la pregunta como correcta o incorrecta durante la ejecución.\n\nEl programa debe imprimir los números ordenados separados por espacios, en una sola línea.\n\nPor ejemplo, para el arreglo [64, 34, 25, 12, 22], el output del programa debe ser:\n12 22 25 34 64\n\nIMPORTANTE: Asegúrate de imprimir los números separados por espacios exactamente como se muestra en el ejemplo, ya que cualquier diferencia hará que la respuesta se marque como incorrecta.",
      "difficulty": "Difícil",
      "max_score": 10,
      "order_index": 2,
      "initial_code": "// Arreglo predefinido para la prueba\nmyArray = [64, 34, 25, 12, 22]\n\n// Escribe tu código aquí para ordenar el arreglo\n// Debe imprimir los números separados por espacios\n// Ejemplo: 12 22 25 34 64",
      "language": "tlang",
      "database_schema": "",
      "options": [],
      "correct_answer": "",
      "execution_timeout": 5000,
      "allow_partial_credit": true,
      "show_expected_output": false,
      "created_at": "2025-08-19T16:00:30.133Z"
    },
    {
      "id": 4,
      "test_id": 1,
      "category_id": 1,
      "family_id": 1,
      "type": "sql",
      "title": "Consulta SQL con rango de números",
      "description": "Escribe una consulta SQL que seleccione todos los registros de la tabla 'empleados' donde el campo 'salario' esté entre 3000 y 5000 (inclusive).\n\nLa tabla empleados tiene la siguiente estructura:\n- id (INTEGER)\n- nombre (VARCHAR)\n- departamento (VARCHAR)\n- salario (INTEGER)\n\nTu consulta debe retornar todos los campos de los empleados que cumplan con el criterio de salario.\n\nEjemplo de resultado esperado:\nEmpleados con salario entre 3000 y 5000.\n\nIMPORTANTE: Escribe solo la consulta SQL, sin explicaciones adicionales.",
      "difficulty": "Fácil",
      "max_score": 10,
      "order_index": 3,
      "initial_code": "",
      "language": "javascript",
      "database_schema": "CREATE TABLE empleados (\n    id INTEGER PRIMARY KEY,\n    nombre VARCHAR(100),\n    departamento VARCHAR(50),\n    salario INTEGER\n);\n\nINSERT INTO empleados VALUES\n(1, 'Juan Pérez', 'Ventas', 4500),\n(2, 'María García', 'IT', 6000),\n(3, 'Carlos López', 'RRHH', 3500),\n(4, 'Ana Martín', 'Ventas', 2800),\n(5, 'Pedro Ruiz', 'IT', 5500);",
      "options": [],
      "correct_answer": "SELECT * FROM empleados WHERE salario BETWEEN 3000 AND 5000;",
      "execution_timeout": 5000,
      "allow_partial_credit": true,
      "show_expected_output": false,
      "created_at": "2025-08-19T16:00:30.216Z"
    },
    {
      "id": 5,
      "test_id": 1,
      "category_id": 1,
      "family_id": 1,
      "type": "sql",
      "title": " Consulta SQL con agrupación y filtrado",
      "description": "Escribe una consulta SQL que agrupe los empleados por departamento, cuente cuántos empleados hay en cada departamento y muestre solo aquellos departamentos que tienen más de 2 empleados. Los resultados deben estar ordenados por cantidad de empleados de forma descendente.\n\nLa consulta debe mostrar:\n- Nombre del departamento\n- Cantidad de empleados (con alias 'cantidad')\n\nIMPORTANTE: Escribe solo la consulta SQL, sin explicaciones adicionales.",
      "difficulty": "Medio",
      "max_score": 10,
      "order_index": 4,
      "initial_code": "",
      "language": "javascript",
      "database_schema": "-- Misma tabla empleados con más datos\nINSERT INTO empleados VALUES\n(6, 'Luis Torres', 'Ventas', 4200),\n(7, 'Sofia Chen', 'IT', 5800),\n(8, 'Roberto Kim', 'Ventas', 3900);",
      "options": [],
      "correct_answer": "SELECT departamento, COUNT(*) as cantidad \nFROM empleados \nGROUP BY departamento \nHAVING COUNT(*) > 2 \nORDER BY cantidad DESC;",
      "execution_timeout": 5000,
      "allow_partial_credit": true,
      "show_expected_output": false,
      "created_at": "2025-08-19T16:00:30.238Z"
    },
    {
      "id": 6,
      "test_id": 2,
      "category_id": 1,
      "family_id": 1,
      "type": "multiple_choice",
      "title": "DGDG",
      "description": "DGDG",
      "difficulty": "Medio",
      "max_score": 10,
      "order_index": 1,
      "initial_code": "",
      "language": "javascript",
      "database_schema": "",
      "options": [
        {
          "text": "DGDG",
          "correct": false
        },
        {
          "text": "DGDG",
          "correct": false
        },
        {
          "text": "DGDG",
          "correct": true
        },
        {
          "text": "DGDFGD",
          "correct": false
        }
      ],
      "correct_answer": "",
      "execution_timeout": 5000,
      "allow_partial_credit": true,
      "show_expected_output": false,
      "created_at": "2025-08-19T16:13:35.325Z"
    }
  ],
  "test_cases": [
    {
      "id": 1,
      "question_id": 1,
      "name": "Caso Ejemplo ",
      "input_data": " [12, 35, 1, 10, 34]",
      "expected_output": "35",
      "is_hidden": false,
      "weight": 25,
      "timeout_ms": 5000,
      "created_at": "2025-08-19T16:00:29.929Z"
    },
    {
      "id": 2,
      "question_id": 1,
      "name": " Números Repetidos",
      "input_data": "[50, 50, 25, 40, 30]",
      "expected_output": "50",
      "is_hidden": false,
      "weight": 25,
      "timeout_ms": 5000,
      "created_at": "2025-08-19T16:00:29.978Z"
    },
    {
      "id": 3,
      "question_id": 1,
      "name": "Mayor al Inicio",
      "input_data": "[100, 45, 67, 23, 89]",
      "expected_output": "100",
      "is_hidden": false,
      "weight": 25,
      "timeout_ms": 5000,
      "created_at": "2025-08-19T16:00:30.000Z"
    },
    {
      "id": 4,
      "question_id": 1,
      "name": "Caso Edge",
      "input_data": "[1, 2, 3, 4, 5]",
      "expected_output": " 5",
      "is_hidden": true,
      "weight": 25,
      "timeout_ms": 5000,
      "created_at": "2025-08-19T16:00:30.024Z"
    },
    {
      "id": 5,
      "question_id": 2,
      "name": "Caso Ejemplo ",
      "input_data": "[1, 5, 3, 5, 2, 5, 4, 1, 3, 2]",
      "expected_output": "Rep: 3\nVal: 5",
      "is_hidden": false,
      "weight": 50,
      "timeout_ms": 5000,
      "created_at": "2025-08-19T16:00:30.069Z"
    },
    {
      "id": 6,
      "question_id": 2,
      "name": "Empate Izquierda a Derecha",
      "input_data": "[1, 5, 3, 5, 2, 5, 4, 1, 3, 2]",
      "expected_output": "Rep: 3\nVal: 5",
      "is_hidden": false,
      "weight": 50,
      "timeout_ms": 5000,
      "created_at": "2025-08-19T16:00:30.090Z"
    },
    {
      "id": 7,
      "question_id": 2,
      "name": "Caso Edge",
      "input_data": " [2, 2, 2, 2, 1, 3, 4, 5, 1, 1]",
      "expected_output": "Rep: 4\nVal: 2",
      "is_hidden": true,
      "weight": 25,
      "timeout_ms": 5000,
      "created_at": "2025-08-19T16:00:30.111Z"
    },
    {
      "id": 8,
      "question_id": 3,
      "name": "Caso Ejemplo",
      "input_data": " [64, 34, 25, 12, 22]",
      "expected_output": "12 22 25 34 64",
      "is_hidden": false,
      "weight": 40,
      "timeout_ms": 5000,
      "created_at": "2025-08-19T16:00:30.154Z"
    },
    {
      "id": 9,
      "question_id": 3,
      "name": "Array Pequeño",
      "input_data": "[3, 1, 2]",
      "expected_output": "1 2 3",
      "is_hidden": false,
      "weight": 30,
      "timeout_ms": 5000,
      "created_at": "2025-08-19T16:00:30.174Z"
    },
    {
      "id": 10,
      "question_id": 3,
      "name": "Caso Edge",
      "input_data": "[5, 2, 8, 1, 9]",
      "expected_output": " 1 2 5 8 9",
      "is_hidden": true,
      "weight": 30,
      "timeout_ms": 5000,
      "created_at": "2025-08-19T16:00:30.195Z"
    }
  ],
  "candidates": [
    {
      "id": 1,
      "name": "Juan Carlos",
      "lastname": "Pérez López",
      "email": "juan.perez@email.com",
      "phone": null,
      "position_applied": "Frontend Developer",
      "experience_level": null,
      "created_at": "2025-08-16T17:46:34.103Z",
      "updated_at": "2025-08-16T17:46:34.103Z"
    }
  ],
  "test_sessions": [],
  "answers": []
}